using System;
using System.ComponentModel;
using System.Text;
using System.Windows.Forms;


namespace LCD1602
{
    public partial class CharMapForm : Form
    {
        #region CharMap
        private static readonly byte[,] CharMap_21h_7Fh = new byte[95,7] 
        {
            {0x04,0x04,0x04,0x04,0x04,0x00,0x04},
            {0x0A,0x0A,0x00,0x00,0x00,0x00,0x00},
            {0x0A,0x0A,0x1F,0x0A,0x1F,0x0A,0x0A},
            {0x04,0x0F,0x14,0x0E,0x05,0x1E,0x04},
            {0x18,0x19,0x02,0x04,0x08,0x13,0x03},
            {0x0C,0x12,0x14,0x08,0x15,0x12,0x0D},
            {0x06,0x02,0x04,0x00,0x00,0x00,0x00},
            {0x01,0x02,0x04,0x04,0x04,0x02,0x01},
            {0x10,0x08,0x04,0x04,0x04,0x08,0x10},
            {0x00,0x04,0x15,0x0E,0x15,0x04,0x00},
            {0x00,0x04,0x04,0x1F,0x04,0x04,0x00},
            {0x00,0x00,0x00,0x00,0x0C,0x04,0x08},
            {0x00,0x00,0x00,0x1F,0x00,0x00,0x00},
            {0x00,0x00,0x00,0x00,0x00,0x18,0x18},
            {0x00,0x01,0x02,0x04,0x08,0x10,0x00},
            {0x0E,0x11,0x13,0x15,0x19,0x11,0x0E},
            {0x04,0x0C,0x04,0x04,0x04,0x04,0x0E},
            {0x0E,0x11,0x01,0x02,0x04,0x08,0x1F},
            {0x1F,0x02,0x04,0x02,0x01,0x11,0x0E},
            {0x02,0x06,0x0A,0x12,0x1F,0x02,0x02},
            {0x1F,0x10,0x1E,0x01,0x01,0x11,0x0E},
            {0x06,0x08,0x10,0x1E,0x11,0x11,0x0E},
            {0x1F,0x01,0x02,0x04,0x08,0x08,0x08},
            {0x0E,0x11,0x11,0x0E,0x11,0x11,0x0E},
            {0x0E,0x11,0x11,0x0F,0x01,0x02,0x0C},
            {0x00,0x0C,0x0C,0x00,0x0C,0x0C,0x00},
            {0x00,0x0C,0x0C,0x00,0x0C,0x04,0x08},
            {0x01,0x02,0x04,0x08,0x04,0x02,0x01},
            {0x00,0x00,0x1F,0x00,0x1F,0x00,0x00},
            {0x10,0x08,0x04,0x02,0x04,0x08,0x10},
            {0x0E,0x11,0x01,0x02,0x04,0x00,0x04},
            {0x0E,0x11,0x01,0x0D,0x15,0x15,0x0E},
            {0x0E,0x11,0x11,0x11,0x1F,0x11,0x11},
            {0x1E,0x11,0x11,0x1E,0x11,0x11,0x1E},
            {0x0E,0x11,0x10,0x10,0x10,0x11,0x0E},
            {0x1E,0x11,0x11,0x11,0x11,0x11,0x1E},
            {0x1F,0x10,0x10,0x1E,0x10,0x10,0x1F},
            {0x1F,0x10,0x10,0x1E,0x10,0x10,0x10},
            {0x0E,0x11,0x10,0x17,0x11,0x11,0x0F},
            {0x11,0x11,0x11,0x1F,0x11,0x11,0x11},
            {0x0E,0x04,0x04,0x04,0x04,0x04,0x0E},
            {0x07,0x02,0x02,0x02,0x02,0x12,0x0C},
            {0x11,0x12,0x14,0x18,0x14,0x12,0x11},
            {0x10,0x10,0x10,0x10,0x10,0x10,0x1F},
            {0x1B,0x15,0x11,0x11,0x11,0x11,0x11},
            {0x11,0x11,0x19,0x15,0x13,0x11,0x11},
            {0x0E,0x11,0x11,0x11,0x11,0x11,0x0E},
            {0x0E,0x11,0x11,0x1E,0x10,0x10,0x10},
            {0x0E,0x11,0x11,0x11,0x15,0x12,0x0D},
            {0x0E,0x11,0x11,0x1E,0x14,0x12,0x11},
            {0x0F,0x10,0x10,0x0E,0x01,0x01,0x1E},
            {0x1F,0x04,0x04,0x04,0x04,0x04,0x04},
            {0x11,0x11,0x11,0x11,0x11,0x11,0x0E},
            {0x11,0x11,0x11,0x11,0x11,0x0A,0x04},
            {0x11,0x11,0x11,0x15,0x15,0x15,0x0A},
            {0x11,0x11,0x0A,0x04,0x0A,0x11,0x11},
            {0x11,0x11,0x11,0x0A,0x04,0x04,0x04},
            {0x1F,0x01,0x02,0x04,0x08,0x10,0x1F},
            {0x07,0x04,0x04,0x04,0x04,0x04,0x07},
            {0x11,0x0A,0x1F,0x04,0x1F,0x04,0x04},
            {0x1C,0x04,0x04,0x04,0x04,0x04,0x1C},
            {0x04,0x0A,0x11,0x00,0x00,0x00,0x00},
            {0x00,0x00,0x00,0x00,0x00,0x00,0x1F},
            {0x04,0x02,0x01,0x00,0x00,0x00,0x00},
            {0x00,0x00,0x0E,0x01,0x0F,0x11,0x0F},
            {0x10,0x10,0x16,0x19,0x11,0x11,0x1E},
            {0x00,0x00,0x0E,0x10,0x10,0x11,0x0E},
            {0x01,0x01,0x0D,0x13,0x11,0x11,0x0F},
            {0x00,0x00,0x0E,0x11,0x1E,0x10,0x0E},
            {0x06,0x09,0x08,0x1C,0x08,0x08,0x08},
            {0x0F,0x11,0x11,0x0F,0x01,0x01,0x0E},
            {0x10,0x10,0x16,0x19,0x11,0x11,0x11},
            {0x04,0x00,0x0C,0x04,0x04,0x04,0x0E},
            {0x01,0x03,0x01,0x01,0x01,0x09,0x06},
            {0x10,0x10,0x12,0x14,0x18,0x14,0x12},
            {0x0C,0x04,0x04,0x04,0x04,0x04,0x0E},
            {0x00,0x00,0x1A,0x15,0x15,0x11,0x11},
            {0x00,0x00,0x16,0x19,0x11,0x11,0x11},
            {0x00,0x00,0x0E,0x11,0x11,0x11,0x0E},
            {0x00,0x00,0x0E,0x11,0x1E,0x10,0x10},
            {0x00,0x00,0x0D,0x13,0x0F,0x01,0x01},
            {0x00,0x00,0x16,0x19,0x10,0x10,0x10},
            {0x00,0x00,0x0F,0x10,0x0E,0x01,0x1E},
            {0x08,0x1C,0x08,0x08,0x08,0x09,0x06},
            {0x00,0x00,0x11,0x11,0x11,0x13,0x0D},
            {0x00,0x00,0x11,0x11,0x11,0x0A,0x04},
            {0x00,0x00,0x11,0x11,0x15,0x15,0x0A},
            {0x00,0x00,0x11,0x0A,0x04,0x0A,0x11},
            {0x00,0x00,0x11,0x11,0x0F,0x01,0x0E},
            {0x00,0x00,0x1F,0x02,0x04,0x08,0x1F},
            {0x01,0x02,0x02,0x04,0x02,0x02,0x01},
            {0x04,0x04,0x04,0x04,0x04,0x04,0x04},
            {0x10,0x08,0x08,0x04,0x08,0x08,0x10},
            {0x00,0x04,0x02,0x1F,0x02,0x04,0x00},
            {0x00,0x04,0x08,0x1F,0x08,0x04,0x00}
        };

        private static readonly byte[,] CharMap_A0h_FFh = new byte[96,7] 
        {
            {0x1F,0x11,0x10,0x1E,0x11,0x11,0x1E},
            {0x1F,0x11,0x10,0x10,0x10,0x10,0x10},
            {0x0A,0x00,0x1F,0x10,0x1E,0x10,0x1F},
            {0x15,0x15,0x15,0x0E,0x15,0x15,0x15},
            {0x1E,0x01,0x01,0x0F,0x01,0x01,0x1E},
            {0x11,0x11,0x13,0x15,0x19,0x11,0x11},
            {0x0A,0x04,0x11,0x13,0x15,0x19,0x11},
            {0x0F,0x05,0x05,0x05,0x05,0x15,0x09},
            {0x1F,0x11,0x11,0x11,0x11,0x11,0x11},
            {0x11,0x11,0x11,0x0A,0x04,0x08,0x10},
            {0x04,0x0E,0x15,0x15,0x15,0x0E,0x04},
            {0x11,0x11,0x11,0x0F,0x01,0x01,0x01},
            {0x15,0x15,0x15,0x15,0x15,0x15,0x1F},
            {0x18,0x08,0x08,0x0E,0x09,0x09,0x0E},
            {0x11,0x11,0x11,0x19,0x15,0x15,0x19},
            {0x0E,0x11,0x01,0x07,0x01,0x11,0x0E},
            {0x12,0x15,0x15,0x1D,0x15,0x15,0x12},
            {0x0F,0x11,0x11,0x0F,0x05,0x09,0x11},
            {0x03,0x0C,0x10,0x1E,0x11,0x11,0x0E},
            {0x00,0x00,0x1C,0x12,0x1C,0x12,0x1C},
            {0x00,0x00,0x1F,0x11,0x10,0x10,0x10},
            {0x0A,0x00,0x0E,0x11,0x1E,0x10,0x0E},
            {0x00,0x00,0x15,0x15,0x0E,0x15,0x15},
            {0x00,0x00,0x1E,0x01,0x06,0x01,0x1E},
            {0x00,0x0A,0x04,0x11,0x13,0x15,0x19},
            {0x00,0x00,0x12,0x14,0x18,0x14,0x12},
            {0x00,0x00,0x12,0x14,0x18,0x14,0x12},
            {0x00,0x00,0x0F,0x05,0x05,0x15,0x09},
            {0x00,0x00,0x11,0x1B,0x15,0x11,0x11},
            {0x00,0x00,0x11,0x11,0x1F,0x11,0x11},
            {0x00,0x00,0x1F,0x11,0x11,0x11,0x11},
            {0x00,0x00,0x1F,0x04,0x04,0x04,0x04},
            {0x00,0x00,0x11,0x11,0x0F,0x01,0x01},
            {0x00,0x00,0x15,0x15,0x15,0x15,0x1F},
            {0x00,0x00,0x18,0x08,0x0E,0x09,0x0E},
            {0x00,0x00,0x11,0x11,0x19,0x15,0x19},
            {0x00,0x00,0x10,0x10,0x1C,0x12,0x1C},
            {0x00,0x00,0x0E,0x11,0x07,0x11,0x0E},
            {0x00,0x00,0x12,0x15,0x1D,0x15,0x12},
            {0x00,0x00,0x0F,0x11,0x0F,0x05,0x09},
            {0x00,0x00,0x04,0x09,0x12,0x09,0x04},
            {0x00,0x00,0x04,0x12,0x09,0x12,0x04},
            {0x00,0x00,0x00,0x00,0x09,0x12,0x1B},
            {0x1B,0x12,0x09,0x00,0x00,0x00,0x00},
            {0x12,0x1A,0x16,0x12,0x07,0x05,0x07},
            {0x04,0x00,0x04,0x08,0x10,0x11,0x0E},
            {0x03,0x04,0x04,0x0E,0x04,0x04,0x18},
            {0x04,0x0A,0x08,0x1E,0x08,0x08,0x0F},
            {0x00,0x00,0x00,0x00,0x00,0x04,0x04},
            {0x00,0x00,0x00,0x04,0x04,0x04,0x04},
            {0x00,0x00,0x0A,0x0A,0x0A,0x00,0x0E},
            {0x00,0x00,0x0A,0x0A,0x0A,0x00,0x0A},
            {0x14,0x00,0x1D,0x02,0x04,0x08,0x10},
            {0x00,0x00,0x1B,0x0E,0x04,0x0E,0x1B},
            {0x14,0x08,0x15,0x02,0x04,0x08,0x10},
            {0x0E,0x04,0x04,0x04,0x04,0x04,0x0E},
            {0x1F,0x0A,0x0A,0x0A,0x0A,0x0A,0x1F},
            {0x04,0x0E,0x15,0x04,0x04,0x04,0x04},
            {0x04,0x04,0x04,0x04,0x15,0x0E,0x04},
            {0x10,0x12,0x16,0x1F,0x16,0x12,0x10},
            {0x01,0x09,0x0D,0x1F,0x0D,0x09,0x01},
            {0x10,0x11,0x15,0x1F,0x15,0x11,0x10},
            {0x10,0x1C,0x11,0x02,0x04,0x08,0x10},
            {0x00,0x00,0x06,0x06,0x00,0x00,0x00},
            {0x0F,0x05,0x05,0x09,0x11,0x1F,0x11},
            {0x11,0x11,0x11,0x11,0x11,0x1F,0x01},
            {0x15,0x15,0x15,0x15,0x15,0x1F,0x01},
            {0x00,0x1F,0x05,0x09,0x11,0x1F,0x11},
            {0x04,0x04,0x0E,0x15,0x15,0x0E,0x04},
            {0x00,0x00,0x11,0x11,0x11,0x1F,0x01},
            {0x00,0x00,0x15,0x15,0x15,0x1F,0x01},
            {0x02,0x04,0x00,0x00,0x00,0x00,0x00},
            {0x0A,0x00,0x00,0x00,0x00,0x00,0x00},
            {0x09,0x16,0x00,0x00,0x00,0x00,0x00},
            {0x02,0x04,0x0E,0x11,0x1E,0x10,0x0E},
            {0x00,0x0E,0x10,0x11,0x0E,0x04,0x0C},
            {0x0A,0x00,0x0A,0x0A,0x0A,0x02,0x0C},
            {0x04,0x0E,0x0E,0x1F,0x04,0x00,0x00},
            {0x0A,0x00,0x11,0x00,0x0A,0x00,0x00},
            {0x00,0x0E,0x11,0x11,0x11,0x0E,0x00},
            {0x11,0x12,0x15,0x0B,0x17,0x01,0x01},
            {0x11,0x12,0x17,0x09,0x13,0x01,0x07},
            {0x18,0x08,0x18,0x09,0x1B,0x07,0x01},
            {0x11,0x12,0x17,0x09,0x17,0x04,0x07},
            {0x18,0x08,0x18,0x09,0x1B,0x07,0x01},
            {0x11,0x1F,0x11,0x1F,0x11,0x1F,0x11},
            {0x18,0x00,0x06,0x00,0x0C,0x00,0x00},
            {0x08,0x14,0x1D,0x15,0x01,0x0F,0x04},
            {0x08,0x0E,0x08,0x0E,0x08,0x08,0x1E},
            {0x0E,0x04,0x1F,0x04,0x0E,0x04,0x1F},
            {0x00,0x0D,0x00,0x1D,0x00,0x0D,0x02},
            {0x04,0x0E,0x04,0x1F,0x04,0x0E,0x04},
            {0x12,0x0A,0x06,0x0A,0x12,0x02,0x07},
            {0x06,0x09,0x04,0x0A,0x04,0x12,0x0C},
            {0x0F,0x15,0x15,0x15,0x0F,0x05,0x05},
            {0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}
        };
        #endregion

        #region Ctors
        public CharMapForm()
        {
            InitializeComponent();

            SymbolCode.ContextMenuStrip = new ContextMenuStrip();
            SymbolChar.ContextMenuStrip = new ContextMenuStrip();
        }
        #endregion

        #region Methods
        public byte GetByte(int n)
        {
            return Lcd.GetByte(n);
        }
        #endregion

        #region Events
        public EventHandler SymbolCopied;
        #endregion

        #region Utils
        private void ShowSymbol(byte code)
        {
            if (0x20 < code && code < 0x80)
            {
                code -= 0x21;

                for (int i = 0; i < 7; i++)
                {
                    Lcd.SetByte(i, CharMap_21h_7Fh[code,i]);
                }
            }
            else if (0x9F < code)
            {
                code -= 0xA0;

                for (int i = 0; i < 7; i++)
                {
                    Lcd.SetByte(i, CharMap_A0h_FFh[code,i]);
                }
            }
            else
            {
                for (int i = 0; i < 7; i++)
                {
                    Lcd.SetByte(i, 0x00);
                }
            }
        }

        private void ShowSymbolByCode()
        {
            string image = SymbolCode.Text;

            if (image != "")
            {
                byte code = 0x00;

                if (image.IndexOf('h') != -1)
                {
                    code = Convert.ToByte(image.Replace("h", ""), 16);
                }
                else
                {
                    code = Convert.ToByte(image);
                }

                SymbolChar.Text = Encoding.GetEncoding(1251).GetChars(new byte[1] { code })[0].ToString();
                ShowSymbol(code);
            }
        }

        private void ShowSymbolByChar()
        {
            string text = SymbolChar.Text;

            if (text != null && text != "")
            {
                byte code = Encoding.GetEncoding(1251).GetBytes(new char[1] { text[0] })[0];
                SymbolCode.Text = code.ToString();
                ShowSymbol(code);
            }
        }
        #endregion

        #region Handlers
        private void SymbolCodeKeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == '\r')
            {
                ShowSymbolByCode();
            }
            else if (SymbolCode.TextLength < 3 || SymbolCode.SelectionLength != 0)
            {
                switch (e.KeyChar)
                {
                    case 'ф':
                    case 'Ф':
                    case 'a': e.KeyChar = 'A'; break;
                    case 'и':
                    case 'И':
                    case 'b': e.KeyChar = 'B'; break;
                    case 'с':
                    case 'С':
                    case 'c': e.KeyChar = 'C'; break;
                    case 'в':
                    case 'В':
                    case 'd': e.KeyChar = 'D'; break;
                    case 'у':
                    case 'У':
                    case 'e': e.KeyChar = 'E'; break;
                    case 'а':
                    case 'А':
                    case 'f': e.KeyChar = 'F'; break;

                    case 'H':
                    case 'h':
                    case 'р':
                    case 'Р':
                    {
                        e.KeyChar = 'h';
                        e.Handled = SymbolCode.Text.IndexOf('h') != -1 ||
                                    SymbolCode.SelectionStart != SymbolCode.TextLength ||
                                    SymbolCode.TextLength == 0;
                    } break;

                    default: e.Handled = "0123456789ABCDEF\b".IndexOf(e.KeyChar) == -1; break;
                }
            }
            else
            {
                e.Handled = e.KeyChar != '\b';
            }
        }

        private void SymbolCodeTextChanged(object sender, EventArgs e)
        {
            int h = SymbolCode.Text.IndexOf('h');

            if (h != -1 && h != (SymbolCode.TextLength - 1))
            {
                int t = SymbolCode.SelectionStart;
                SymbolCode.Text = SymbolCode.Text.Replace("h", "") + 'h';
                SymbolCode.SelectionStart = t;
            }
        }

        private void SymbolCharKeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == '\r')
            {
                ShowSymbolByChar();
            }
        }

        private void SymbolCodeShowClick(object sender, EventArgs e)
        {
            ShowSymbolByCode();
        }

        private void SymbolCharClick(object sender, EventArgs e)
        {
            ShowSymbolByChar();
        }

        private void CopySymbolClick(object sender, EventArgs e)
        {
            SymbolCopied?.Invoke(this, EventArgs.Empty);
        }
        #endregion

        #region Override
        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);

            Hide();
            Enabled  = false;
            e.Cancel = true;
        }
        #endregion
    }
}